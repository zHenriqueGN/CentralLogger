package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"
	"time"

	"github.com/zHenriqueGN/CentralLogger/internal/infra/graphql/graph/model"
	"github.com/zHenriqueGN/CentralLogger/internal/usecase"
)

// RegisterSystem is the resolver for the registerSystem field.
func (r *mutationResolver) RegisterSystem(ctx context.Context, input model.RegisterSystem) (*model.System, error) {
	useCaseInput := usecase.RegisterSystemUseCaseInputDTO{
		Name:        input.Name,
		Description: input.Description,
		Version:     input.Version,
	}
	useCaseOutput, err := r.RegisterSystemUseCase.Execute(ctx, useCaseInput)
	if err != nil {
		return nil, err
	}
	output := model.System{
		ID:          useCaseOutput.ID,
		Name:        useCaseInput.Name,
		Description: useCaseInput.Description,
		Version:     useCaseInput.Version,
	}
	return &output, nil
}

// RegisterLog is the resolver for the registerLog field.
func (r *mutationResolver) RegisterLog(ctx context.Context, input model.RegisterLog) (*model.Log, error) {
	inputTimestamp, err := time.Parse(time.RFC3339, input.Timestamp)
	if err != nil {
		return nil, err
	}
	useCaseInput := usecase.RegisterLogUseCaseInputDTO{
		SystemID:  input.SystemID,
		Level:     input.Level,
		Status:    input.Status,
		Message:   input.Message,
		TimeStamp: &inputTimestamp,
	}
	useCaseOutput, err := r.RegisterLogUseCase.Execute(ctx, useCaseInput)
	if err != nil {
		return nil, err
	}
	output := model.Log{
		ID:        useCaseOutput.ID,
		SystemID:  useCaseOutput.SystemID,
		Level:     useCaseOutput.Level,
		Status:    useCaseOutput.Status,
		Message:   useCaseOutput.Message,
		Timestamp: useCaseOutput.TimeStamp.Format(time.RFC3339),
	}
	return &output, nil
}

// GetSystem is the resolver for the getSystem field.
func (r *queryResolver) GetSystem(ctx context.Context, id string) (*model.System, error) {
	panic(fmt.Errorf("not implemented: GetSystem - getSystem"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
